using Bridge, StaticArrays, Distributions
using Test, Statistics, Random, LinearAlgebra
using Bridge.Models
using DelimitedFiles
using DataFrames
using CSV
using ForwardDiff


import Bridge: R3, IndexedTime, llikelihood, kernelr3, constdiff
import ForwardDiff: jacobian

wdir = "/Users/frankvandermeulen/.julia/dev/Bffg_sde"
cd(wdir)
outdir= wdir * "/out/"



function kernelrk4(f, t, y, dt, ‚Ñô)
    k1 = f(t, y, ‚Ñô)
    k2 = f(t + 0.5*dt, y + 0.5*k1*dt, ‚Ñô)
    k3 = f(t + 0.5*dt, y + 0.5*k2*dt, ‚Ñô)
    k4 = f(t + dt, y + k3*dt, ‚Ñô)
    y + dt*(k1 + 2*k2 + 2*k3 + k4)/6.0
end

function convert_HFC_to_PŒΩC(H,F,C)
    P = inv(H)
    P, P*F, C
end   

function convert_PŒΩC_to_HFC(P,ŒΩ,C)
    H = inv(P)
    P, P\ŒΩ, C
end   

vectorise(P,ŒΩ, C) = vcat(SVector(P), ŒΩ, SVector(C))


"""
    static_accessor_HFc(u::SVector, ::Val{T}) where T
Access data stored in the container `u` so that it matches the shapes of H,F,c
and points to the correct points in `u`. `T` is the dimension of the stochastic
process.
"""
function static_accessor_HFc(u::K, ::Val{T}) where {K<:Union{SVector,MVector},T}
    Hidx = SVector{T*T,Int64}(1:T*T)
    Fidx = SVector{T,Int64}((T*T+1):(T*T+T))
    reshape(u[Hidx], Size(T,T)), u[Fidx], u[T*T+T+1]
end








struct PBridge{T,T‚Ñô,T‚ÑôÃÉ,TP,TŒΩ,TC} <: ContinuousTimeProcess{T}
    ‚Ñô::T‚Ñô   # diffusion 
    ‚ÑôÃÉ::T‚ÑôÃÉ   # auxiliary process
    tt::Vector{Float64}  # time grid
    P::Vector{TP}        # P=‚Ñô values on time grid
    ŒΩ::Vector{TŒΩ}        # ŒΩ values on time grid
    C::TC                # constant to compute h-function
    PBridge(‚Ñô::T‚Ñô, ‚ÑôÃÉ::T‚ÑôÃÉ, tt, Pt::Vector{TP}, ŒΩt::Vector{TŒΩ}, C::TC) where {T‚Ñô,T‚ÑôÃÉ,TP,TŒΩ,TC} =
        new{Bridge.valtype(‚Ñô),T‚Ñô,T‚ÑôÃÉ,TP,TŒΩ,TC}(‚Ñô, ‚ÑôÃÉ, tt, Pt, ŒΩt, C)

    # constructor: provide (timegrid, ‚Ñô, ‚ÑôÃÉ, ŒΩT, PT, CT)    
    function PBridge(‚Ñô, ‚ÑôÃÉ, tt_, PT::TP, ŒΩT::TŒΩ, CT) where {TP, TŒΩ}
        tt = collect(tt_)
        N = length(tt)
        Pt = zeros(TP, N)
        ŒΩt = zeros(TŒΩ, N)
        _, _, C = pbridgeode!(R3(), ‚ÑôÃÉ, tt, (Pt, ŒΩt), (PT, ŒΩT, CT))
        PBridge(‚Ñô, ‚ÑôÃÉ, tt, Pt, ŒΩt, C)
    end

    # 2nd constructor (use also samplepath X in backward ODEs): provide (timegrid, ‚Ñô, ŒΩT, PT, CT, X::Sample‚Ñôath)    
    function PBridge(‚Ñô, ‚ÑôÃÉ, tt_, PT::TP, ŒΩT::TŒΩ, CT, X::SamplePath) where  {TP, TŒΩ}
        tt = collect(tt_)
        N = length(tt)
        Pt = zeros(TP, N)
        ŒΩt = zeros(TŒΩ, N)
        _, _, C = pbridgeode!(R3(), ‚Ñô, tt, (Pt, ŒΩt), (PT, ŒΩT, CT), X)
        PBridge(‚Ñô, ‚ÑôÃÉ, tt, Pt, ŒΩt, C)
    end
end







function pbridgeode!(::R3, ‚ÑôÃÉ, t, (Pt, ŒΩt), (PT, ŒΩT, CT))
    access = Val{}(d)

    function dPŒΩC(s, y, ‚ÑôÃÉ)
        access = Val{}(d)
        P, ŒΩ, _ = static_accessor_HFc(y, access)
        _B, _Œ≤, _œÉ, _a = Bridge.B(s, ‚ÑôÃÉ), Bridge.Œ≤(s, ‚ÑôÃÉ), Bridge.œÉ(s, ‚ÑôÃÉ), Bridge.a(s, ‚ÑôÃÉ)

        dP =  (_B * P) + (P * _B') - _a
        dŒΩ =  (_B * ŒΩ) + _Œ≤
        F = (P \ ŒΩ)
        dC = dot(_Œ≤, F) + 0.5*Bridge.outer(F' * _œÉ) - 0.5*tr( (P \ (_a)))
        vectorise(dP, dŒΩ, dC)
    end

    Pt[end] = PT
    ŒΩt[end] = ŒΩT
    C = CT

    y = vectorise(PT, ŒΩT, CT)
    println(ŒΩT)
    println()
    
    for i in length(t)-1:-1:1
        dt = t[i] - t[i+1]
        y = kernelrk4(dPŒΩC, t[i+1], y, dt, ‚ÑôÃÉ)
        Pt[i], ŒΩt[i], C = static_accessor_HFc(y, access)
    end

    Pt, ŒΩt, C
end

P((i,t)::IndexedTime, x, ùí´::PBridge) = ùí´.P[i]
ŒΩ((i,t)::IndexedTime, x, ùí´::PBridge) = ùí´.ŒΩ[i]
r((i,t)::IndexedTime, x, ùí´::PBridge) = (ùí´.P[i] \ (ùí´.ŒΩ[i] - x) )

function Bridge._b((i,t)::IndexedTime, x, ùí´::PBridge)  
    Bridge.b(t, x, ùí´.‚Ñô) + Bridge.a(t, x, ùí´.‚Ñô) * r((i,t),x,ùí´)   # (ùí´.ŒΩ[i] - ùí´.P[i]*x)
end


Bridge.œÉ(t, x, ùí´::PBridge) = Bridge.œÉ(t, x, ùí´.‚Ñô)
Bridge.a(t, x, ùí´::PBridge) = Bridge.a(t, x, ùí´.‚Ñô)
Bridge.Œì(t, x, ùí´::PBridge) = Bridge.Œì(t, x, ùí´.‚Ñô)
Bridge.constdiff(ùí´::PBridge) = Bridge.constdiff(ùí´.‚Ñô) && Bridge.constdiff(ùí´.‚ÑôÃÉ)

function loghÃÉ(x, ùí´::PBridge) 
    H1, F1, C = convert_PŒΩC_to_HFC(ùí´.P[1], ùí´.ŒΩ[1],ùí´.C)
    -0.5 * x' * H1 * x + F1' * x - C    
end

function llikelihood(::LeftRule, X::SamplePath, ùí´::PBridge; skip = 0)
    tt = X.tt
    xx = X.yy

    som::Float64 = 0.
    for i in 1:length(tt)-1-skip #skip last value, summing over n-1 elements
        s = tt[i]
        x = xx[i]
        rÃÉ = r((i,s), x, ùí´)
        dt = tt[i+1]-tt[i]

        som += dot( Bridge._b((i,s), x, ùí´.‚Ñô) - Bridge._b((i,s), x, ùí´.‚ÑôÃÉ), rÃÉ) 
        if !constdiff(ùí´)
            P = P((i,s), x, ùí´)
            som -= 0.5*tr( (a((i,s), x, ùí´.‚Ñô) - a((i,s), x, ùí´.‚ÑôÃÉ)) * P )   
            som += 0.5 *( rÃÉ'* ( a((i,s), x, ùí´.‚Ñô) - a((i,s), x, ùí´.‚ÑôÃÉ) ) * rÃÉ ) 
        end
        som *= dt 
    end
    som + loghÃÉ(X.yy[1], ùí´)
end


"""
    init_HFC(v, L; œµ=0.01)

    First computes xT = L^(-1) * vT (Moore-Penrose inverse)    
    Then convert artifical observation v ~ N(xT, œµ^(-1) * I)
    to triplet  (H, F, C)
"""
function init_HFC(v, L; œµ=0.01)
    P = œµ^(-1)*SMatrix{3,3}(1.0I)
    xT = L\v
    z = zero(xT)
    C = -logpdf(Bridge.Gaussian(z, P), z) 
    convert_PŒΩC_to_HFC(P, xT ,C)
end


"""
    observation_HFC(v, L, Œ£)

    Convert observation v ~ N(Lx, Œ£)
    to triplet  (H, F, C)
"""
function observation_HFC(v, L, Œ£)
    A = L' * inv(Œ£)
    H = A*L
    H, A*v, - logpdf(Bridge.Gaussian(zero(v), Œ£), v)
end
    
"""
    fusion_HFC((H1, F1, C1), (H2, F2, C2))

    returns added characteristics that correspond to fusion in (H,F,C)-parametrisation
"""
function fusion_HFC((H1, F1, C1), (H2, F2, C2))
    H1 + H2, F1 + F2, C1+C2
end




################################################################################
################################  TESTING  ################################################
# settings sampler
iterations = 3_000 # 5*10^4
skip_it = 500  #1000
subsamples = 0:skip_it:iterations

T = 0.5
dt = 1/5000
œÑ(T) = (x) ->  x * (2-x/T)
tt = œÑ(T).(0.:dt:T)

sk = 0 # skipped in evaluating loglikelihood
const d=3

easy_conditioning = true
obs_scheme =["full","firstcomponent"][1]
œÅ = obs_scheme=="full" ? 0.85 : 0.95
if obs_scheme=="full"
    LT = SMatrix{3,3}(1.0I)
    vT = easy_conditioning ?  ‚Ñù{3}(1/32,1/4,1) :  ‚Ñù{3}(5/128,3/8,2)
end
if obs_scheme=="firstcomponent"
    LT = @SMatrix [1. 0. 0.]
    vT = easy_conditioning ? ‚Ñù{1}(1/32) : ‚Ñù{1}(5/128)
end


œÅ = 0.0

Œ£diagel = 10e-9
m,  = size(LT)
Œ£T = SMatrix{m,m}(Œ£diagel*I)

# specify target process
struct NclarDiffusion <: ContinuousTimeProcess{‚Ñù{3}}
    Œ±::Float64
    œâ::Float64
    œÉ::Float64
end

Bridge.b(t, x, ‚Ñô::NclarDiffusion) = ‚Ñù{3}(x[2],x[3],-‚Ñô.Œ± * sin(‚Ñô.œâ * x[3]))
Bridge.œÉ(t, x, ‚Ñô::NclarDiffusion) = ‚Ñù{3}(0.0, 0.0, ‚Ñô.œÉ)
Bridge.constdiff(::NclarDiffusion) = true

jacobianb(t, x, ‚Ñô::NclarDiffusion) = @SMatrix [0.0 1.0 0.0 ; 0.0 0.0 1.0 ; 0.0 0.0 -‚Ñô.Œ± * ‚Ñô.œâ * cos(‚Ñô.œâ * x[3])]

‚Ñô = NclarDiffusion(6.0, 2pi, 1.0)
x0 = ‚Ñù{3}(0.0, 0.0, 0.0)


# specify auxiliary process
struct NclarDiffusionAux <: ContinuousTimeProcess{‚Ñù{3}}
    Œ±::Float64
    œâ::Float64
    œÉ::Float64
end

Bridge.B(t, ‚Ñô::NclarDiffusionAux) = @SMatrix [0.0 1.0 0.0 ; 0.0 0.0 1.0 ; 0.0 0.0 0.0]
Bridge.Œ≤(t, ‚Ñô::NclarDiffusionAux) = ‚Ñù{3}(0.0,0.0,0)
Bridge.œÉ(t,  ‚Ñô::NclarDiffusionAux) = ‚Ñù{3}(0.0,0.0, ‚Ñô.œÉ)
Bridge.constdiff(::NclarDiffusionAux) = true
Bridge.b(t, x, ‚Ñô::NclarDiffusionAux) = Bridge.B(t,‚Ñô) * x + Bridge.Œ≤(t,‚Ñô)
Bridge.a(t, ‚Ñô::NclarDiffusionAux) = Bridge.œÉ(t,‚Ñô) * Bridge.œÉ(t,  ‚Ñô)'
Bridge.a(t, x, ‚Ñô::NclarDiffusionAux) = Bridge.a(t,‚Ñô) 

‚ÑôÃÉ = NclarDiffusionAux(‚Ñô.Œ±, ‚Ñô.œâ, ‚Ñô.œÉ)


# Solve Backward Recursion
œµ = 10e-2  # choice not too important for bridges
Hinit, Finit, Cinit =  init_HFC(vT, LT; œµ=œµ)
Hobs, Fobs, Cobs = observation_HFC(vT, LT, Œ£T)

HT, FT, CT = fusion_HFC((Hinit, Finit, Cinit), (Hobs, Fobs, Cobs))
PT, ŒΩT, CT = convert_HFC_to_PŒΩC(HT,FT,CT)

ùí´ = PBridge(‚Ñô, ‚ÑôÃÉ, tt, PT, ŒΩT, CT);

####################### MH algorithm ###################
W = sample(tt, Wiener())
X = solve(Euler(), x0, W, ‚Ñô)
X·µí = copy(X)
solve!(Euler(),X·µí, x0, W, ùí´)
solve!(Euler(),X, x0, W, ùí´)
ll = llikelihood(Bridge.LeftRule(), X, ùí´, skip=sk)

# using Plots
# plot(X.tt, getindex.(X.yy,1))


# Fold = ùí´.F
# Hold = ùí´.H
# # new constructor, adaptive
#ùí´ = PBridge(‚Ñô, ‚ÑôÃÉ, tt, FT, HT, CT, X)
 solve!(Euler(),X·µí, x0, W, ùí´)
 solve!(Euler(),X, x0, W, ùí´)
 ll = llikelihood(Bridge.LeftRule(), X, ùí´, skip=sk)

# further initialisation
W·µí = copy(W)
W2 = copy(W)
XX = Any[]
if 0 in subsamples
    push!(XX, copy(X))
end

acc = 0

for iter in 1:iterations
    # ‚Ñôroposal
    global ll, acc, ùí´
    sample!(W2, Wiener())
    #œÅ = rand(Uniform(0.95,1.0))
    W·µí.yy .= œÅ*W.yy + sqrt(1-œÅ^2)*W2.yy
    solve!(Euler(),X·µí, x0, W·µí, ùí´)


    ll·µí = llikelihood(Bridge.LeftRule(), X·µí, ùí´,skip=sk)
    print("ll $ll $ll·µí, diff_ll: ",round(ll·µí-ll;digits=3))

    if log(rand()) <= ll·µí - ll
        X.yy .= X·µí.yy
        W.yy .= W·µí.yy
        ll = ll·µí
        print("‚úì")
        acc +=1
        # ùí´ = PBridge(‚Ñô, ‚ÑôÃÉ, tt, FT, HT, CT, X)
        # ll = llikelihood(Bridge.LeftRule(), X, ùí´, skip=sk)

    end

    println()
    if iter in subsamples
        push!(XX, copy(X))
    end
end

@info "Done."*"\x7"^6

# write mcmc iterates to csv file
extractcomp(v,i) = map(x->x[i], v)

iterates = [Any[s, tt[j], d, XX[i].yy[j][d]] for d in 1:3, j in 1:length(X), (i,s) in enumerate(subsamples) ][:]
df_iterates = DataFrame(iteration=extractcomp(iterates,1),time=extractcomp(iterates,2), component=extractcomp(iterates,3), value=extractcomp(iterates,4))
CSV.write(outdir*"iterates-"*obs_scheme*".csv",df_iterates)

ave_acc_perc = 100*round(acc/iterations;digits=2)





################################################################################

# do this later
if false 

    # solve ODEs using current Sample‚Ñôath X (need to pass ‚Ñô for that, instead of ‚ÑôÃÉ)
    function pbridgeode!(::R3, ‚Ñô, t, (ŒΩt, Pt), (ŒΩT, PT, CT), X)
        Pt[end] = PT
        ŒΩt[end] = ŒΩT
        ŒΩ, P, C = ŒΩT, PT, CT


        # function dP(s, y, (‚Ñô,x)) 
        #     #ff(s,‚Ñô) = u -> Bridge.b(s,u,‚Ñô)
        #     #B = jacobian(u->ff(s,‚Ñô)(u), x)
        #     B = jacobianb(s,x,‚Ñô)
        #     out = - B'*y - y*B + y*Bridge.a(s, x, ‚Ñô)*y'
        #     return out
        #  end
        
        dP(s, y, (BÃÉ, aÃÉ)) = - BÃÉ'*y - y * BÃÉ + y*aÃÉ*y'


        #dŒΩ(s, y, (P,‚ÑôÃÉ)) = -Bridge.B(s, ‚ÑôÃÉ)'*y + P*Bridge.a(s, ‚ÑôÃÉ)*y  + P*Bridge.Œ≤(s, ‚ÑôÃÉ)
        # function dŒΩ(s, y, (P,‚Ñô,x)) 
        #     #B = jacobian(u->Bridge.b(s,u,‚Ñô),x)
        #     B = jacobianb(s,x,‚Ñô)
        #     out = -B'*y + P*Bridge.a(s, x, ‚Ñô)*y + P*(Bridge.b(s,x,‚Ñô) - B*x)
        #     return out
        #  end

        dŒΩ(s,y, (BÃÉ, aÃÉ, Œ≤ÃÉ)) = -BÃÉ'*y + P*aÃÉ*y + P*Œ≤ÃÉ

        for i in length(t)-1:-1:1
            dt = t[i] - t[i+1]
            x = X.yy[i+1]
            s = t[i+1]

            BÃÉ = jacobianb(s,x,‚Ñô)
            Œ≤ÃÉ = Bridge.b(s,x,‚Ñô) - BÃÉ*x
            aÃÉ =  Bridge.a(s, x, ‚Ñô)

            C += ( Œ≤ÃÉ'*ŒΩ + 0.5*ŒΩ'*aÃÉ*ŒΩ - 0.5*tr(P*aÃÉ) ) * dt
            #P = kernelr3(dP, t[i+1], P, dt, (‚Ñô,x))
            P = kernelrk4(dP, t[i+1], P, dt, (BÃÉ, aÃÉ))
            #ŒΩ = kernelr3(dŒΩ, t[i+1], ŒΩ, dt, (P, ‚Ñô, x))
            ŒΩ = kernelrk4(dŒΩ, t[i+1], ŒΩ, dt, (BÃÉ, aÃÉ, Œ≤ÃÉ))
            ŒΩt[i] = ŒΩ
            Pt[i] = P
        end

        ŒΩt, Pt, C
    end

    if false
        ff(s,‚Ñô) = (u) -> Bridge.b(s,u,‚Ñô)
        s = 1.0
        x = vT
        ff(s,‚Ñô)(x)
        #B = jacobian(u -> ff(s,‚Ñô)(u), x)
        B = jacobian(ff(s,‚Ñô), x)
    end

end


################ plotting in R ############
using RCall
dd = df_iterates

@rput dd
@rput obs_scheme
@rput outdir

R"""
library(ggplot2)
library(tidyverse)
theme_set(theme_bw(base_size = 13))

vT = c(0.03125,   0.25,   1.0)                  #vT <- c(5/128,3/8,2)
vTvec = rep(vT, nrow(dd)/3)

dd$component <- as.factor(dd$component)
dd <- dd %>% mutate(component=fct_recode(component,'component 1'='1','component 2'='2','component 3'='3'))%>% mutate(trueval = vTvec)

# make figure
p <- ggplot(mapping=aes(x=time,y=value,colour=iteration),data=dd) +
  geom_path(aes(group=iteration)) + geom_hline(aes(yintercept=trueval)) +
  facet_wrap(~component,ncol=1,scales='free_y')+
  scale_colour_gradient(low='green',high='blue')+ylab("")
show(p)

# write to pdf
fn <- paste0(outdir,obs_scheme,".pdf")
pdf(fn,width=7,height=5)
show(p)
dev.off()    

"""


