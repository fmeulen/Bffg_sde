"""
    Observation{Tt, Tv, TL, TŒ£, TH, TF, TC}

    (t,v,L,Œ£): at time t we have observations v ~ N(Lx_t, Œ£)
    (H, F, C): message from the observation to the triple`
"""
struct Observation{Tt, Tv, TL, TŒ£, TH, TF, TC}
    t::Tt
    v::Tv
    L::TL
    Œ£::TŒ£
    H::TH
    F::TF
    C::TC
    Observation(t::Tt, v::Tv, L::TL, Œ£::TŒ£, H::TH, F::TF, C::TC) where {Tt,Tv,TL,TŒ£,TH, TF, TC} =
        new{Tt, Tv, TL, TŒ£, TH, TF, TC}(t,v,L,Œ£,H,F,C)


    function Observation(t::Tt, v::Tv, L::TL, Œ£::TŒ£) where {Tt, Tv, TL, TŒ£}
        H, F, C = observation_HFC(v, L, Œ£)
        new{Tt, Tv, TL, TŒ£, typeof(H), typeof(F), typeof(C)}(t,v,L,Œ£,H,F,C)
    end    
end




struct PathInnovation{TX, TW, Tll}
    X::TX
    W::TW
    ll::Tll
    X·µí::TX
    W·µí::TW
    Wbuf::TW
    PathInnovation(X::TX, W::TW, ll::Tll, X·µí::TX, W·µí::TW, Wbuf::TW) where {TX, Tll, TW} =
    new{TX,TW,Tll}(X, W, ll, X·µí, W·µí, Wbuf)

    function PathInnovation(x0, ùí´)
        tt = ùí´.tt
        W = sample(tt, wienertype(ùí´.‚Ñô))    #W = sample(tt, Wiener())
        X = solve(Euler(), x0, W, ùí´.‚Ñô)  # allocation
        solve!(Euler(),X, x0, W, ùí´)
        X·µí = deepcopy(X)
        ll = llikelihood(Bridge.LeftRule(), X, ùí´, skip=sk)
        W·µí = deepcopy(W)
        Wbuf = deepcopy(W)
        PathInnovation(X,W,ll,X·µí, W·µí, Wbuf)
        # TX, TW, Tll = typeof(X), typeof(W), typeof(ll)
        # new{TX, TW, Tll}(X,W,ll,X·µí, W·µí, Wbuf)
    end
end




"""
    convert_HFC_to_PŒΩC(H,F,C)

    convert parametrisation 
        exp(-c - 0.5 x' H x + F' x)
    to 
        exp(-c - 0.5 x'P^(-1) x + (P^(-1) nu)' x)
"""
function convert_HFC_to_PŒΩC(H,F,C)
    P = inv(H)
    P, P*F, C
end   

function convert_PŒΩC_to_HFC(P,ŒΩ,C)
    H = inv(P)
    P, P\ŒΩ, C
end   

vectorise(P,ŒΩ, C) = vcat(SVector(P), ŒΩ, SVector(C))

"""
    static_accessor_HFc(u::SVector, ::Val{T}) where T
Access data stored in the container `u` so that it matches the shapes of H,F,c
and points to the correct points in `u`. `T` is the dimension of the stochastic
process.

implemented by M. Mider in GuidedProposals.jl
"""
function static_accessor_HFc(u::K, ::Val{T}) where {K<:Union{SVector,MVector},T}
    Hidx = SVector{T*T,Int64}(1:T*T)
    Fidx = SVector{T,Int64}((T*T+1):(T*T+T))
    reshape(u[Hidx], Size(T,T)), u[Fidx], u[T*T+T+1]
end


abstract type Solver end

struct RK4 <: Solver end
struct DE{T} <: Solver 
    solvertype::T
end

struct Adaptive <: Solver end
    
struct AssumedDensityFiltering{T} <: Solver 
    solvertype::T
end



"""
    GuidedProcess

        struct for partial bridges
    ‚Ñô:  target diffusion
    ‚ÑôÃÉ:  auxiliary NclarDiffusion
    tt: time grid for diffusion (including start and end time)
    H:  H-values on tt
    F:  F values on tt
    C:  -C is an additive factor in the loglikelihood

    constructor from incomsing triplet (PT, ŒΩT, cT) is given by 
        GuidedProcess(‚Ñô, ‚ÑôÃÉ, tt, PT, ŒΩT, CT) 
"""
struct GuidedProcess{T,T‚Ñô,T‚ÑôÃÉ,TH,TF,TC} <: ContinuousTimeProcess{T}
    ‚Ñô::T‚Ñô   
    ‚ÑôÃÉ::T‚ÑôÃÉ   
    tt::Vector{Float64}  
    H::Vector{TH}      
    F::Vector{TF}      
    C::TC              
    GuidedProcess(‚Ñô::T‚Ñô, ‚ÑôÃÉ::T‚ÑôÃÉ, tt, Ht::Vector{TH}, Ft::Vector{TF}, C::TC) where {T‚Ñô,T‚ÑôÃÉ,TH,TF,TC} =
        new{Bridge.valtype(‚Ñô),T‚Ñô,T‚ÑôÃÉ,TH,TF,TC}(‚Ñô, ‚ÑôÃÉ, tt, Ht, Ft, C)

    # constructor: provide (timegrid, ‚Ñô, ‚ÑôÃÉ, ŒΩT, PT, CT)    
    function GuidedProcess(::RK4, ‚Ñô, ‚ÑôÃÉ, tt_, HT::TH, FT::TF, CT) where {TH, TF}
        tt = collect(tt_)
        N = length(tt)
        Ht = zeros(TH, N)
        Ft = zeros(TF, N)
        _, _, C = pbridgeode_HFC!(RK4(), ‚ÑôÃÉ, tt, (Ht, Ft), (HT, FT, CT))
        GuidedProcess(‚Ñô, ‚ÑôÃÉ, tt, Ht, Ft, C)
    end

    
    function GuidedProcess(D::DE, ‚Ñô, ‚ÑôÃÉ, tt_, HT::TH, FT::TF, CT) where {TH, TF}
        tt = collect(tt_)
        N = length(tt)
        Ht = zeros(TH, N)
        Ft = zeros(TF, N)
        _, _, C = pbridgeode_HFC!(D, ‚ÑôÃÉ, tt, (Ht, Ft), (HT, FT, CT))
        GuidedProcess(‚Ñô, ‚ÑôÃÉ, tt, Ht, Ft, C)
    end
end




"""
    pbridgeode_HFC!(::RK4, ‚ÑôÃÉ, t, (Ht, Ft), (HT, FT, CT))

    Solve backward ODEs for `(H, F, C)` starting from `(HT, FT, CT)`` on time grid `t``
    Auxiliary process is given by ‚ÑôÃÉ
    Writes into (Ht, Ft)
"""
function pbridgeode_HFC!(::RK4, ‚ÑôÃÉ, t, (Ht, Ft), (HT, FT, CT))
    function dHFC(s, y, ‚ÑôÃÉ)
        access = Val{}(dim(‚ÑôÃÉ))
        H, F, _ = static_accessor_HFc(y, access)
        _B, _Œ≤, _œÉ, _a = Bridge.B(s, ‚ÑôÃÉ), Bridge.Œ≤(s, ‚ÑôÃÉ), Bridge.œÉ(s, ‚ÑôÃÉ), Bridge.a(s, ‚ÑôÃÉ)

        dH = - (_B' * H)  - (H * _B) + Bridge.outer( H * _œÉ)
        dF = - (_B' * F) + H * (_a * F + _Œ≤) 
        dC = dot(_Œ≤, F) + 0.5*Bridge.outer(F' * _œÉ) - 0.5*tr( (H* (_a)))
        vectorise(dH, dF, dC)
    end

    Ht[end] = HT
    Ft[end] = FT
    C = CT
    access = Val{}(dim(‚ÑôÃÉ))
    y = vectorise(HT, FT, CT)

    for i in length(t)-1:-1:1
        dt = t[i] - t[i+1]
        y = kernelrk4(dHFC, t[i+1], y, dt, ‚ÑôÃÉ)
        Ht[i], Ft[i], C = static_accessor_HFc(y, access)
    end
    Ht, Ft, C
end

function pbridgeode_HFC!(D::DE, ‚ÑôÃÉ, tt, (Ht, Ft), (HT, FT, CT))
    function dHFC(y, ‚ÑôÃÉ, s) # note interchanged order of arguments
        access = Val{}(dim(‚ÑôÃÉ))
        H, F, C = static_accessor_HFc(y, access)
        _B, _Œ≤, _œÉ, _a = Bridge.B(s, ‚ÑôÃÉ), Bridge.Œ≤(s, ‚ÑôÃÉ), Bridge.œÉ(s, ‚ÑôÃÉ), Bridge.a(s, ‚ÑôÃÉ)
    
        dH = - (_B' * H)  - (H * _B) + Bridge.outer( H * _œÉ)
        dF = - (_B' * F) + H * (_a * F + _Œ≤) 
        dC = dot(_Œ≤, F) + 0.5*Bridge.outer(F' * _œÉ) - 0.5*tr( (H* (_a)))
        vectorise(dH, dF, dC)
    end
    yT = vectorise(HT, FT, CT)
    prob = ODEProblem{false}(
            dHFC,   # increment
            yT, # starting val
            (tt[end], tt[1]),   # time interval
            ‚ÑôÃÉ)  # parameter
    access = Val{}(dim(‚ÑôÃÉ))
    TP = typeof(HT); TŒΩ= typeof(FT); Tc = typeof(CT)
    saved_values = SavedValues(Float64, Tuple{TP,TŒΩ,Tc})
    callback = SavingCallback(
        (u,t,integrator) -> static_accessor_HFc(u, access),
        saved_values;
        saveat=reverse(tt), 
        tdir=-1
    )
    integrator = init(
        prob,
        D.solvertype,
        callback=callback,
        save_everystep=false, # to prevent wasting memory allocations
    )
    sol = DifferentialEquations.solve!(integrator)   # s
    
    savedt = saved_values.t
    ss = saved_values.saveval
    reverse!(ss)
    for i ‚àà eachindex(savedt)
        Ht[i] = getindex.(ss,1)[i]
        Ft[i] = getindex.(ss,2)[i]
    end
    C = sol.u[1][end]    # = getindex.(saved_y,3)[1]

    Ht, Ft, C
end



"""
    init_HFC(v, L, d; œµ=0.01)

    d = dimension of the diffusion
    First computes xT = L^(-1) * vT (Moore-Penrose inverse), a reasonable guess for the full state based on the partial observation vT
    Then convert artifical observation v ~ N(xT, œµ^(-1) * I)
    to triplet  (H, F, C)
"""
function init_HFC(v, L, d::Int64; œµ=0.01)
    P = œµ^(-1)*SMatrix{d,d}(1.0I)
    xT = L\v
    z = zero(xT)
    C = -logpdf(Bridge.Gaussian(z, P), z) 
    convert_PŒΩC_to_HFC(P, xT ,C)
end


"""
    observation_HFC(v, L, Œ£)

    Convert observation v ~ N(Lx, Œ£)
    to triplet  (H, F, C)
"""
function observation_HFC(v, L, Œ£)
    A = L' * inv(Œ£)
    H = A*L
    H, A*v, - logpdf(Bridge.Gaussian(zero(v), Œ£), v)
end
    
"""
    fusion_HFC((H1, F1, C1), (H2, F2, C2))

    returns added characteristics that correspond to fusion in (H,F,C)-parametrisation
"""
function fusion_HFC((H1, F1, C1), (H2, F2, C2))
    H1 + H2, F1 + F2, C1+C2
end



r((i,t)::IndexedTime, x, ùí´::GuidedProcess) = ùí´.F[i] - ùí´.H[i] * x 
loghÃÉ(x, ùí´::GuidedProcess) = -0.5 * x' * ùí´.H[1] * x + ùí´.F[1]' * x - ùí´.C    
   
Bridge._b((i,t)::IndexedTime, x, ùí´::GuidedProcess)  =  Bridge.b(t, x, ùí´.‚Ñô) + Bridge.a(t, x, ùí´.‚Ñô) * r((i,t),x,ùí´)   
Bridge.œÉ(t, x, ùí´::GuidedProcess) = Bridge.œÉ(t, x, ùí´.‚Ñô)
Bridge.a(t, x, ùí´::GuidedProcess) = Bridge.a(t, x, ùí´.‚Ñô)
Bridge.constdiff(ùí´::GuidedProcess) = Bridge.constdiff(ùí´.‚Ñô) && Bridge.constdiff(ùí´.‚ÑôÃÉ)


function llikelihood(::LeftRule, X::SamplePath, ùí´::GuidedProcess; skip = 0, include_h0=false)
    tt = X.tt
    xx = X.yy
    som::Float64 = 0.
    for i in 1:length(tt)-1-skip #skip last value, summing over n-1 elements
        s = tt[i]
        x = xx[i]
        rÃÉ = r((i,s), x, ùí´)
        dt = tt[i+1]-tt[i]

        som += dot( Bridge._b((i,s), x, ùí´.‚Ñô) - Bridge._b((i,s), x, ùí´.‚ÑôÃÉ), rÃÉ) * dt
        if !constdiff(ùí´)
            som -= 0.5*tr( (a((i,s), x, ùí´.‚Ñô) - a((i,s), x, ùí´.‚ÑôÃÉ)) * ùí´.H[i] )   * dt
            som += 0.5 * ( rÃÉ' * ( a((i,s), x, ùí´.‚Ñô) - a((i,s), x, ùí´.‚ÑôÃÉ) ) * rÃÉ)  * dt
        end
    end
    som + (include_h0) * loghÃÉ(X.yy[1], ùí´)
end


function pbridgeode_HFC!(D::DE, ‚ÑôÃÉ, tt, (Ht, Ft), (HT, FT, CT))
    function dHFC(y, ‚ÑôÃÉ, s) # note interchanged order of arguments
        access = Val{}(dim(‚ÑôÃÉ))
        H, F, C = static_accessor_HFc(y, access)
        _B, _Œ≤, _œÉ, _a = Bridge.B(s, ‚ÑôÃÉ), Bridge.Œ≤(s, ‚ÑôÃÉ), Bridge.œÉ(s, ‚ÑôÃÉ), Bridge.a(s, ‚ÑôÃÉ)
    
        dH = - (_B' * H)  - (H * _B) + Bridge.outer( H * _œÉ)
        dF = - (_B' * F) + H * (_a * F + _Œ≤) 
        dC = dot(_Œ≤, F) + 0.5*Bridge.outer(F' * _œÉ) - 0.5*tr( (H* (_a)))
        vectorise(dH, dF, dC)
    end
    yT = vectorise(HT, FT, CT)
    prob = ODEProblem{false}(
            dHFC,   # increment
            yT, # starting val
            (tt[end], tt[1]),   # time interval
            ‚ÑôÃÉ)  # parameter
    access = Val{}(dim(‚ÑôÃÉ))
    TP = typeof(HT); TŒΩ= typeof(FT); Tc = typeof(CT)
    saved_values = SavedValues(Float64, Tuple{TP,TŒΩ,Tc})
    callback = SavingCallback(
        (u,t,integrator) -> static_accessor_HFc(u, access),
        saved_values;
        saveat=reverse(tt), 
        tdir=-1
    )
    integrator = init(
        prob,
        D.solvertype,
        callback=callback,
        save_everystep=false, # to prevent wasting memory allocations
    )
    sol = DifferentialEquations.solve!(integrator)   # s
    
    savedt = saved_values.t
    ss = saved_values.saveval
    reverse!(ss)
    for i ‚àà eachindex(savedt)
        Ht[i] = getindex.(ss,1)[i]
        Ft[i] = getindex.(ss,2)[i]
    end
    C = sol.u[1][end]    # = getindex.(saved_y,3)[1]

    Ht, Ft, C
end



################################################################################




function forwardguide!((X, W, ll), (X·µí, W·µí, Wbuffer), ùí´, œÅ; skip=sk, verbose=false)
    acc = false
    sample!(Wbuffer, wienertype(ùí´.‚Ñô))
    W·µí.yy .= œÅ*W.yy + sqrt(1.0-œÅ^2)*Wbuffer.yy
    x0 = X.yy[1]
    solve!(Euler(),X·µí, x0, W·µí, ùí´)
    ll·µí = llikelihood(Bridge.LeftRule(), X·µí, ùí´, skip=skip)

    if !verbose
        print("ll $ll $ll·µí, diff_ll: ",round(ll·µí-ll;digits=3))
    end
    if log(rand()) <= ll·µí - ll
        X.yy .= X·µí.yy
        W.yy .= W·µí.yy
        ll = ll·µí
        if !verbose   print("‚úì")    end
        acc = true
    end
    println()
    (X, W, ll), acc 
end


"""
    forwardguide(x0, ‚Ñê::PathInnovation, ùí´, œÅ; skip=sk, verbose=false)

    returns tuple (‚Ñê, xend, acc) where
    ‚Ñê:: PathInnovation (updated elements for X, W and ll in case of acceptance, else just the 'input' ‚Ñê)
    xend: endpoint of updated samplepath x
    acc: Booolean if pCN step was accepted
"""
function forwardguide(x0, ‚Ñê::PathInnovation , ùí´, œÅ; skip=sk, verbose=false)
    X, W, ll, X·µí, W·µí, Wbuf = ‚Ñê.X, ‚Ñê.W, ‚Ñê.ll, ‚Ñê.X·µí, ‚Ñê.W·µí, ‚Ñê.Wbuf
    sample!(Wbuf, wienertype(ùí´.‚Ñô))
    W·µí.yy .= œÅ*W.yy + sqrt(1.0-œÅ^2)*Wbuf.yy
    solve!(Euler(),X·µí, x0, W·µí, ùí´)
    ll·µí = llikelihood(Bridge.LeftRule(), X·µí, ùí´, skip=skip)

    !verbose && print("ll $ll $ll·µí, diff_ll: ",round(ll·µí-ll;digits=3))
    if log(rand()) <= ll·µí - ll
        !verbose &&  print("‚úì")    
        !verbose && println()
        return (PathInnovation(X·µí, W·µí, ll·µí, X·µí, W·µí, Wbuf), lastval(X·µí), true)
    else
        !verbose && println()
        return (‚Ñê, lastval(X), false)
    end
end


function forwardguide(x0, ‚Ñês::Vector{PathInnovation} , ùí´s, œÅ; skip=sk, verbose=false)
    acc = 0
    xend = x0  
    for i ‚àà 1:n-1
        (‚Ñês[i], xend, a) = forwardguide(xend, ‚Ñês[i], ùí´s[i], œÅ; skip=skip, verbose=verbose);
        acc += a
    end
    ‚Ñês, acc
end





function backwardfiltering(obs, timegrids, ‚Ñô, ‚ÑôÃÉ ;œµ = 10e-2, M)
    Hinit, Finit, Cinit =  init_HFC(obs[end].v, obs[end].L, dim(‚Ñô); œµ=œµ)
    n = length(obs)

    HT, FT, CT = fusion_HFC(HFC(obs[n]), (Hinit, Finit, Cinit) )
    ùí´s = GuidedProcess[]
    for i in n:-1:2
        tt = timegrid(obs[i-1].t, obs[i].t, M=M)
        ùí´ = GuidedProcess(DE(Vern7()), ‚Ñô, ‚ÑôÃÉ, timegrids[i-1], HT, FT, CT)
        pushfirst!(ùí´s, ùí´)
        message = (ùí´.H[1], ùí´.F[1], ùí´.C[1])
        (HT, FT, CT) = fusion_HFC(message, HFC(obs[i-1]))
    end
    (HT, FT, CT), ùí´s
end




timegrids = set_timegrids(obs,100)
